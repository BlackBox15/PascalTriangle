/*
 * Строим треугольник Паскаля.
 * Оно же - треугольная таблица биноминальных коэффициентов.
 */
package demo;

import java.util.Arrays;

public class PascalTriangle {
    public static void main2(String[] args) {
        // нужен 2-мерный массив целочисленный
		// размер массива
		int size = 20;
		int[][] triangle = new int[size][];
		
//		// для дебаггинга
//		// выводим содержимое контейнера triangle
//		for(int[] n : triangle)	{
//			System.out.println(n);
//		}
		
		// создаём "пирамиду"
		for(int i = 0; i < size; i++)	{
			triangle[i] = new int[i + 1];
			int trng_str_len = triangle[i].length;
			// заполняем 1-цами 0-вые члены строк
			triangle[i][0] = 1;
			
			// заполняем 1-цами крайние члены строк, ориентируемся по длине строки
//			triangle[i][(triangle[i].length - 1)] = 1;
			// более элегантный способ заполнить "диагональ"
			// не надо делать никаких доп. вычислений, просто ставим "1" 
			// в требуемую позицию
			triangle[i][i] = 1;
			
			// заполняем строки - горизонтальные массивы
			// в промежутке от 0-го до крайнего члена строки, не включая
			for(int j = 1; j < (trng_str_len - 1); j++)	{
				// вводим необходимую арифметику для вычисления
				// внутренне содержание строки
				triangle[i][j] = triangle[i-1][j-1] + triangle[i-1][j];
			}
		}
		
		// выводим содержимое контейнера triangle
		// обходим triangle по 1-му уровню, n присваивается ссылка на 
		// содержащийся массив внутри
		for(int[] n : triangle)	{
			// т.к. содержимое каждой строки - есть int,
			// обходим "внутренний" массив нашим int-сканнером
			// и выводим результат в строку с указанием необходимых параметров
			// форматирования строки
			for(int m : n)	{
				System.out.printf("%6d ", m);
			}
			// по окончании строки, перед тем, как перейти к следующей
			// переводим вывод на новую строку
			System.out.println();
		}
		
//		// ..просто для знакомства с новым инструментом
//		// вывод содержимого массива как есть
//		System.out.println(Arrays.deepToString(triangle));
    }
    
}
